/*--------------------------------------------------------------------------------------------------------------------*/

#ifndef INDI_PROXY_INDI_PROXY_H
#define INDI_PROXY_INDI_PROXY_H

/*--------------------------------------------------------------------------------------------------------------------*/

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

/*--------------------------------------------------------------------------------------------------------------------*/

#define buff_t /* */ void *
#define BUFF_t const void *

#define str_t /* */ char *
#define STR_t const char *

/*--------------------------------------------------------------------------------------------------------------------*/
/* MEMORY                                                                                                             */
/*--------------------------------------------------------------------------------------------------------------------*/

void indi_memory_initialize();

void indi_memory_finalize();

/*--------------------------------------------------------------------------------------------------------------------*/

size_t indi_free(
    buff_t buff
);

buff_t indi_alloc(
    size_t size
);

buff_t indi_realloc(
    buff_t buff,
    size_t size
);

/*--------------------------------------------------------------------------------------------------------------------*/
/* JSON                                                                                                               */
/*--------------------------------------------------------------------------------------------------------------------*/

typedef enum
{
    INDI_TYPE_NULL      = 100,
    INDI_TYPE_BOOLEAN   = 101,
    INDI_TYPE_NUMBER    = 102,
    INDI_TYPE_STRING    = 103,
    INDI_TYPE_DICT      = 104,
    INDI_TYPE_LIST      = 105,

} indi_type_t;

/*--------------------------------------------------------------------------------------------------------------------*/

typedef struct
{
    uint64_t magic;

    indi_type_t type;

} indi_object_t;

/*--------------------------------------------------------------------------------------------------------------------*/

indi_object_t *indi_json_parse(
    STR_t text
);

void indi_object_free(
    /*-*/ indi_object_t *obj
);

str_t indi_object_to_string(
    const indi_object_t *obj
);

str_t indi_object_to_cstring(
    const indi_object_t *obj
);

/*--------------------------------------------------------------------------------------------------------------------*/
/* XML                                                                                                                */
/*--------------------------------------------------------------------------------------------------------------------*/

typedef struct _xmlDoc indi_xmldoc_t;

/*--------------------------------------------------------------------------------------------------------------------*/

indi_xmldoc_t *indi_xml_parse(
    STR_t text
);

void indi_xmldoc_free(
    /*-*/ indi_xmldoc_t *doc
);

str_t indi_xml_to_string(
    const indi_xmldoc_t *doc
);

/*--------------------------------------------------------------------------------------------------------------------*/
/* VALIDATION                                                                                                         */
/*--------------------------------------------------------------------------------------------------------------------*/

bool indi_validation_initialize();

bool indi_validation_finalize();

bool indi_validation_check(
    indi_xmldoc_t *doc
);

/*--------------------------------------------------------------------------------------------------------------------*/
/* TRANSFORM                                                                                                          */
/*--------------------------------------------------------------------------------------------------------------------*/

indi_object_t *indi_xmldoc_to_object(
    indi_xmldoc_t *doc,
    bool validate
);

indi_xmldoc_t *indi_object_to_xmldoc(
    indi_object_t *obj,
    bool validate
);

/*--------------------------------------------------------------------------------------------------------------------*/
/* PROXY                                                                                                              */
/*--------------------------------------------------------------------------------------------------------------------*/

typedef void (* indi_emit_func_t)(str_t message);

/*--------------------------------------------------------------------------------------------------------------------*/

typedef struct
{
    indi_emit_func_t emit_func;

    size_t size;
    str_t buff;

    size_t read_size;
    size_t write_size;

    size_t read_idx;
    size_t write_idx;

    size_t stag_idx;

    STR_t etag;

} indi_proxy_t;

/*--------------------------------------------------------------------------------------------------------------------*/

bool indi_proxy_initialize(
    indi_proxy_t *proxy,
    indi_emit_func_t emit_func,
    size_t size
);

bool indi_proxy_finalize(
    indi_proxy_t *proxy
);

void indi_proxy_consume(
    indi_proxy_t *proxy,
    size_t size,
    BUFF_t buff
);

/*--------------------------------------------------------------------------------------------------------------------*/

#endif /* INDI_PROXY_INDI_PROXY_H */

/*--------------------------------------------------------------------------------------------------------------------*/
